#!/usr/bin/python
"""
Run virt tests outside the autotest client harness.

@copyright: Red Hat 2012
"""
import os, sys

def silence_stdin_stderr():
    in_fd = os.open('/dev/null', os.O_RDONLY)
    try:
        os.dup2(in_fd, 0)
    finally:
        os.close(in_fd)
    sys.stdin = os.fdopen(0, 'r')
    out_fd = os.open('/dev/null', os.O_WRONLY | os.O_CREAT)
    try:
        os.dup2(out_fd, 2)
    finally:
        os.close(out_fd)
    sys.stderr = os.fdopen(2, 'w')


DEBUG = False

if not DEBUG:
    silence_stdin_stderr()


class StreamProxy(object):
    def __init__(self, filename='/dev/null', stream=sys.stdout):
        self.terminal = stream
        self.log = open(filename, "a")
        self.stream = self.log

    def write(self, message):
        self.stream.write(message)

    def switch(self):
        if self.stream == self.log:
            self.stream = self.terminal
        else:
            self.stream = self.log

sys.stdout = StreamProxy(stream=sys.stdout)

try:
    from autotest.client import setup_modules
except ImportError:
    try:
        autotest_dir = os.environ['AUTOTEST_PATH']
    except KeyError:
        sys.stdout.switch()
        print("Environment variable $AUTOTEST_PATH not set. "
              "please set it to a path containing an autotest checkout")
        sys.exit(1)
    client_dir = os.path.join(autotest_dir, 'client')
    sys.path.insert(0, client_dir)
    import setup_modules
    sys.path.pop(0)
    setup_modules.setup(base_path=client_dir,
                        root_module_name="autotest.client")

test_dir = os.path.abspath(os.path.dirname(sys.modules[__name__].__file__))
sys.path.append(test_dir)

from virttest import cartesian_config, standalone_test

standalone_test.configure_logging()
standalone_test.configure_console_logging()

if __name__ == '__main__':
    import optparse
    parser = optparse.OptionParser()
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose",
                      help="Exhibit debug messages")
    parser.add_option("-t", "--type",
                      action="store", dest="type",
                      help="Choose test type (kvm, libvirt, v2v)")
    parser.add_option("-c", "--config",
                      action="store", dest="config",
                      help="Explicitly choose a cartesian config")
    options, args = parser.parse_args()

    if (not options.type) and (not options.config):
        sys.stdout.switch()
        parser.print_help()
        sys.exit(1)

    parser = cartesian_config.Parser()
    if options.config is not None:
        cfg = os.path.abspath(options.config)
    else:
        cfg = os.path.join(test_dir, options.type, "cfg", "tests.cfg")

    parser.parse_file(cfg)
    standalone_test.run_tests(parser)
