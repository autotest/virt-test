#!/usr/bin/python
"""
Run virt tests outside the autotest client harness.

@copyright: Red Hat 2012
"""
import os, sys


class StreamProxy(object):
    """
    Mechanism to supress stdout output, while keeping the original stdout.
    """

    def __init__(self, filename='/dev/null', stream=sys.stdout):
        """
        Keep 2 streams to write to, and eventually switch.
        """
        self.terminal = stream
        self.log = open(filename, "a")
        self.stream = self.log

    def write(self, message):
        """
        Write to the current stream.
        """
        self.stream.write(message)

    def flush(self):
        """
        Flush the current stream.
        """
        self.stream.flush()

    def switch(self):
        """
        Switch between the 2 currently available streams.
        """
        if self.stream == self.log:
            self.stream = self.terminal
        else:
            self.stream = self.log


if __name__ == '__main__':
    import optparse
    parser = optparse.OptionParser()
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose",
                      help="Exhibit debug messages")
    parser.add_option("-t", "--type",
                      action="store", dest="type",
                      help="Choose test type (kvm, libvirt, v2v)")
    parser.add_option("-c", "--config",
                      action="store", dest="config",
                      help="Explicitly choose a cartesian config")
    options, args = parser.parse_args()

    if (not options.type) and (not options.config):
        print("No type (-t) or config (-c) options specified, aborting...")
        parser.print_help()
        sys.exit(1)

    if not options.verbose:
        # Effectively points the stderr FD (2) to /dev/null, silencing
        # stderr.
        out_fd = os.open('/dev/null', os.O_WRONLY | os.O_CREAT)
        try:
            os.dup2(out_fd, 2)
        finally:
            os.close(out_fd)
        sys.stderr = os.fdopen(2, 'w')

    # Replace stdout by our StreamProxy object, so we can supress all output
    # but the one we specifically want.
    sys.stdout = StreamProxy(stream=sys.stdout)

    try:
        from autotest.client import setup_modules
    except ImportError:
        try:
            autotest_dir = os.environ['AUTOTEST_PATH']
        except KeyError:
            sys.stdout.switch()
            print("Environment variable $AUTOTEST_PATH not set. "
                  "please set it to a path containing an autotest checkout")
            sys.exit(1)
        client_dir = os.path.join(autotest_dir, 'client')
        sys.path.insert(0, client_dir)
        import setup_modules
        sys.path.pop(0)
        setup_modules.setup(base_path=client_dir,
                            root_module_name="autotest.client")

    test_dir = os.path.abspath(os.path.dirname(sys.modules[__name__].__file__))
    sys.path.append(test_dir)

    from virttest import cartesian_config, standalone_test

    standalone_test.configure_logging()
    standalone_test.configure_console_logging()
    parser = cartesian_config.Parser()
    if options.config is not None:
        cfg = os.path.abspath(options.config)
    else:
        cfg = os.path.join(test_dir, options.type, "cfg", "tests.cfg")

    parser.parse_file(cfg)
    standalone_test.run_tests(parser)
