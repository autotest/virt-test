#!/usr/bin/python
"""
Run virt tests outside the autotest client harness.

@copyright: Red Hat 2012
"""
import os, sys, traceback, signal, optparse

class StreamProxy(object):
    """
    Mechanism to supress stdout output, while keeping the original stdout.
    """
    def __init__(self, filename='/dev/null', stream=sys.stdout):
        """
        Keep 2 streams to write to, and eventually switch.
        """
        self.terminal = stream
        if filename is None:
            self.log = stream
        else:
            self.log = open(filename, "a")
        self.stream = self.log

    def write(self, message):
        """
        Write to the current stream.
        """
        self.stream.write(message)

    def flush(self):
        """
        Flush the current stream.
        """
        self.stream.flush()

    def switch(self):
        """
        Switch between the 2 currently available streams.
        """
        if self.stream == self.log:
            self.stream = self.terminal
        else:
            self.stream = self.log

def _silence_stderr():
    """
    Points the stderr FD (2) to /dev/null, silencing it.
    """
    out_fd = os.open('/dev/null', os.O_WRONLY | os.O_CREAT)
    try:
        os.dup2(out_fd, 2)
    finally:
        os.close(out_fd)
    sys.stderr = os.fdopen(2, 'w')

def _handle_stdout(options):
    """
    Replace stdout with a proxy object.

    Depending on self.options.verbose, make proxy print to /dev/null, or
    original sys.stdout stream.
    """
    if not options.verbose:
        _silence_stderr()
        # Replace stdout with our proxy pointing to /dev/null
        sys.stdout = StreamProxy(filename="/dev/null", stream=sys.stdout)
    else:
        # Retain full stdout
        sys.stdout = StreamProxy(filename=None, stream=sys.stdout)

def _import_autotest_modules():
    """
    Import the autotest modules.

    Two methods will be attempted:
    1) Import the libraries system wide. For this to work, the
       autotest-framework package for the given distro must be installed.
    2) Import the libraries from an autotest checkout. For this to work,
       the env variable 'AUTOTEST_PATH' must be set to the path of an
       autotest checkout.
    """
    try:
        from autotest.client import setup_modules
    except ImportError:
        try:
            autotest_dir = os.environ['AUTOTEST_PATH']
        except KeyError:
            try:
                sys.stdout.switch()
            except AttributeError:
                pass
            print("Environment variable $AUTOTEST_PATH not set. "
                  "please set it to a path containing an autotest checkout")
            print("Or install autotest-framework for your distro")
            sys.exit(1)
        client_dir = os.path.join(autotest_dir, 'client')
        sys.path.insert(0, client_dir)
        import setup_modules
        sys.path.pop(0)
        setup_modules.setup(base_path=client_dir,
                            root_module_name="autotest.client")

def _find_default_qemu_paths(options_qemu=None):
    qemu_bin_path = None
    _import_autotest_modules()
    from virttest import utils_misc

    if options_qemu:
        if not os.path.isfile(options_qemu):
            raise RuntimeError("Invalid qemu binary provided (%s)" %
                               options_qemu)
        qemu_bin_path = options_qemu
    else:
        try:
            qemu_bin_path = utils_misc.find_command('qemu-kvm')
        except ValueError:
            qemu_bin_path = utils_misc.find_command('kvm')

    qemu_dirname = os.path.dirname(qemu_bin_path)
    parent_qemu_dirname = os.path.dirname(qemu_dirname)
    qemu_img_path = os.path.join(parent_qemu_dirname, 'qemu-img')
    qemu_io_path = os.path.join(parent_qemu_dirname, 'qemu-io')

    if not os.path.exists(qemu_img_path):
        qemu_img_path = utils_misc.find_command('qemu-img')

    if not os.path.exists(qemu_io_path):
        qemu_io_path = utils_misc.find_command('qemu-io')

    return [qemu_bin_path, qemu_img_path, qemu_io_path]


class VirtTestRunParser(optparse.OptionParser):
    def __init__(self):
        optparse.OptionParser.__init__(self, usage = 'Usage: %prog [options]')
        _import_autotest_modules()
        from virttest import data_dir

        try:
            qemu_bin_path = _find_default_qemu_paths()[0]
        except ValueError:
            qemu_bin_path = "Could not find one"

        general = optparse.OptionGroup(self, 'General Options')
        general.add_option("-v", "--verbose", action="store_true",
                           dest="verbose", help="Exhibit debug messages")
        general.add_option("-t", "--type", action="store", dest="type",
                           help="Choose test type (qemu, libvirt, v2v)")
        general.add_option("-c", "--config", action="store", dest="config",
                           help="Explicitly choose a cartesian config")
        general.add_option("-r", "--restore-image", action="store_true",
                           dest="restore",
                           help="Restore guest image from the pristine image")
        general.add_option("-j", "--restore-image-between-tests",
                           action="store_true", default=False,
                           dest="restore_image_between_tests",
                           help="Restore from the pristine image on *every test*")
        general.add_option("--tests", action="store", dest="tests",
                           help=('List of space separated tests to be executed'
                                ' - example: --tests "boot reboot shutdown"'))
        general.add_option("--list-tests", action="store_true", dest="list",
                           help="List tests available")
        general.add_option("--data-dir", action="store", dest="datadir",
                           help=("Path to a data dir. "
                                 "Default path: %s" %
                                 data_dir.get_backing_data_dir()))
        general.add_option("--restart-vm", action="store_true", dest="restart_vm",
                           default=False,
                           help=("Whether to reboot the vm between every test. "
                                 "Default: False"))
        general.add_option("-m", "--mem", action="store", dest="mem",
                           default="512",
                           help=("RAM dedicated to the main VM. Default:"
                                 "%default"))
        self.add_option_group(general)

        qemu = optparse.OptionGroup(self, 'Options specific to the qemu test')
        qemu.add_option("--qemu-bin", action="store", dest="qemu",
                        help=("Path to a custom qemu binary to be tested. "
                              "Default path: %s" % qemu_bin_path))
        qemu.add_option("--accel", action="store", dest="accel", default="kvm",
                        help=("Accelerator used to run qemu (kvm or tcg). "
                              "Default: kvm"))
        qemu.add_option("--nettype", action="store", dest="nettype",
                        default="user",
                        help=("QEMU network option (bridge or user). "
                              "Default: %default"))
        qemu.add_option("--netdst", action="store", dest="netdst",
                        default="virbr0",
                        help=("Bridge name to be used "
                              "(if you chose bridge as nettype). "
                              "Default: %default"))
        qemu.add_option("--monitor", action="store", dest="monitor",
                        default='human',
                        help="Monitor type (human or qmp). Default: %default")
        self.add_option_group(qemu)


QEMU_DEFAULT_SET = "migrate"
LIBVIRT_DEFAULT_SET = ("unattended_install.import.import, virsh_domname, "
                       "remove_guest.without_disk")

class VirtTestApp(object):
    """
    Class representing the execution of the virt test runner.
    """
    def __init__(self):
        """
        Parses options and initializes attributes.

        @attribute option_parser: option parser instance with app options.
        @attribute options: options resulted from option parser.
        @attribute cartesian_parser: specialized test config parser, it's going
                to be set to something useful later.
        """
        # set English environment (command output might be localized, need to be safe)
        os.environ['LANG'] = 'en_US.UTF-8'
        self.option_parser = VirtTestRunParser()
        self.options, self.args = self.option_parser.parse_args()
        self.cartesian_parser = None


    def _process_qemu_bin(self):
        """
        Puts the value of the qemu bin option in the cartesian parser command.
        """
        (qemu_bin_path, qemu_img_path,
         qemu_io_path) = _find_default_qemu_paths(self.options.qemu)
        self.cartesian_parser.parse_string("qemu_binary = %s" % qemu_bin_path)
        self.cartesian_parser.parse_string("qemu_img_binary = %s" %
                                           qemu_img_path)
        self.cartesian_parser.parse_string("qemu_io_binary = %s" % qemu_io_path)

    def _process_qemu_accel(self):
        """
        Puts the value of the qemu bin option in the cartesian parser command.
        """
        if self.options.accel == 'tcg':
            self.cartesian_parser.parse_string("enable_kvm = no")
            self.cartesian_parser.parse_string("disable_kvm = yes")

    def _process_bridge_mode(self):
        from virttest import standalone_test
        if self.options.nettype == 'bridge':
            if os.getuid() != 0:
                standalone_test.print_stdout("In order to use bridge, "
                                             "you need to be root, aborting...")
                sys.exit(1)
            self.cartesian_parser.parse_string("nettype = bridge")
            self.cartesian_parser.parse_string("netdst = %s" %
                                               self.options.netdst)
        elif self.options.nettype == 'user':
            self.cartesian_parser.parse_string("nettype = user")


    def _process_monitor(self):
        if self.options.monitor == 'qmp':
            self.cartesian_parser.parse_string("monitors = qmp1")
            self.cartesian_parser.parse_string("monitor_type_qmp1 = qmp")


    def _process_qemu_specific_options(self):
        """
        Calls for processing all options specific to the qemu test.
        """
        self._process_qemu_bin()
        self._process_qemu_accel()
        self._process_bridge_mode()
        self._process_monitor()


    def _process_options(self):
        """
        Process the options given in the command line.
        """
        from virttest import cartesian_config, standalone_test
        from virttest import data_dir

        if (not self.options.type) and (not self.options.config):
            print("No type (-t) or config (-c) options specified, aborting...")
            self.option_parser.print_help()
            sys.exit(1)

        if self.options.datadir:
            data_dir.set_backing_data_dir(self.options.datadir)

        standalone_test.create_config_files(self.options)

        self.cartesian_parser = cartesian_config.Parser()

        if self.options.config is not None:
            cfg = os.path.abspath(self.options.config)
        if self.options.config is None:
            cfg = os.path.join(data_dir.get_root_dir(), self.options.type,
                               "cfg", "tests.cfg")

        self.cartesian_parser.parse_file(cfg)

        if self.options.list:
            standalone_test.print_test_list(self.options,
                                            self.cartesian_parser)
            sys.exit(0)
        else:
            standalone_test.bootstrap_tests(self.options)

        if self.options.type == 'qemu':
            self._process_qemu_specific_options()

        if self.options.type and self.options.tests:
            tests = self.options.tests.split(" ")
            self.cartesian_parser.parse_string("only %s" % ", ".join(tests))

        elif (self.options.type and not self.options.tests
              and not self.options.config):
            if self.options.type == 'qemu':
                self.cartesian_parser.parse_string("only %s" %
                                                   QEMU_DEFAULT_SET)
            elif self.options.type == 'libvirt':
                self.cartesian_parser.parse_string("only " %
                                                   LIBVIRT_DEFAULT_SET)

        if self.options.restart_vm:
            self.cartesian_parser.parse_string("restart_vm = yes")

        if self.options.restore_image_between_tests:
            self.cartesian_parser.parse_string("restore_image = yes")

        self.cartesian_parser.parse_string("mem = %s" % self.options.mem)


    def main(self):
        """
        Main point of execution of the test runner.

        1) Handle stdout/err according to the options given.
        2) Import the autotest modules.
        3) Sets the console logging for tests.
        4) Runs the tests according to the options given.
        """
        _handle_stdout(self.options)
        _import_autotest_modules()
        try:
            from virttest import standalone_test

            standalone_test.configure_logging()
            standalone_test.configure_console_logging()

            self._process_options()

            standalone_test.run_tests(self.cartesian_parser, self.options)

        except KeyboardInterrupt:
            pid = os.getpid()
            os.kill(pid, signal.SIGTERM)

        except Exception:
            try:
                sys.stdout.switch()
            except AttributeError:
                pass
            print("Internal error, traceback follows...")
            exc_type, exc_value, exc_traceback = sys.exc_info()
            tb_info = traceback.format_exception(exc_type, exc_value,
                                                 exc_traceback.tb_next)
            tb_info = "".join(tb_info)
            for e_line in tb_info.splitlines():
                print(e_line)
            sys.exit(1)


if __name__ == '__main__':
    app = VirtTestApp()
    app.main()
