AUTHOR = """
uril@redhat.com (Uri Lublin)
drusso@redhat.com (Dror Russo)
mgoldish@redhat.com (Michael Goldish)
dhuff@redhat.com (David Huff)
aeromenk@redhat.com (Alexey Eromenko)
mburns@redhat.com (Mike Burns)
"""
TIME = 'SHORT'
NAME = 'KVM Test (Parallel)'
TEST_TYPE = 'client'
TEST_CLASS = 'Virtualization'
TEST_CATEGORY = 'Functional'

DOC = """
Executes the KVM test framework on a given host (parallel version).
"""


import sys, os, re, logging
from autotest.client.shared import cartesian_config
from autotest.client import utils
from autotest.client.virt import utils_misc
from autotest.client.virt import scheduler


#-----------------------------------------------------------------------------
# set English environment (command output might be localized, need to be safe)
#-----------------------------------------------------------------------------
os.environ['LANG'] = 'en_US.UTF-8'

#---------------------------------------------------------
# Enable modules import from current directory (tests/kvm)
#---------------------------------------------------------
pwd = os.path.join(os.environ['AUTODIR'],'tests/kvm')
sys.path.append(pwd)


str = """
# This string will be parsed after build.cfg.  Make any desired changes to the
# build configuration here.  For example (to install from koji/brew):
# installers = koji_qemu_kvm
"""

parser = cartesian_config.Parser()
kvm_test_dir = os.path.join(os.environ['AUTODIR'],'tests/kvm')
parser.parse_file(os.path.join(kvm_test_dir, "build.cfg"))
parser.parse_string(str)
if not utils_misc.run_tests(parser, job):
    logging.error("KVM build step failed, exiting.")
    sys.exit(1)

str = """
# This string will be parsed after tests.cfg.  Make any desired changes to the
# test configuration here.  For example:
#display = sdl
#install, setup: timeout_multiplier = 3
"""

parser = cartesian_config.Parser()
parser.parse_file(os.path.join(kvm_test_dir, "tests.cfg"))

# Catch the host version for different host
dict_test = {}
for i in parser.get_dicts():
    dict_test = i
    break

if dict_test:
    host_version = cartesian_config.get_host_verson(dict_test)
    if host_version:
        str += "only Host_%s\n" % host_version
    else:
        str += "only Host_default"

parser.parse_string(str)

if args:
    # We get test parameters from command line
    for arg in args:
        try:
            (key, value) = re.findall("^(\w+)=(.*)", arg)[0]
            if key == "only":
                str += "only %s\n" % value
            elif key == "no":
                str += "no %s\n" % value
            else:
                str += "%s = %s\n" % (key, value)
        except IndexError:
            pass

tests = list(parser.get_dicts())

# -------------
# Run the tests
# -------------
# total_cpus defaults to the number of CPUs reported by /proc/cpuinfo
total_cpus = utils.count_cpus()
# total_mem defaults to 3/4 of the total memory reported by 'free'
total_mem = (utils.memtotal() / 1024) * 3/4
# We probably won't need more workers than CPUs
num_workers = total_cpus

# Start the scheduler and workers
s = scheduler.scheduler(tests, num_workers, total_cpus, total_mem, pwd)
job.parallel([s.scheduler],
             *[(s.worker, i, job.run_test) for i in range(num_workers)])

# create the html report in result dir
reporter = os.path.join(os.environ['AUTODIR'], 'tool/html_report.py')
html_file = os.path.join(job.resultdir, 'results.html')
os.system('%s -r %s -f %s -R'%(reporter, job.resultdir, html_file))

# vi: ft=python
