NAME='Heavy memory stress'
AUTHOR='Yiqiao Pu <ypu@redhat.com>'
EXPERIMENTAL='False'
TEST_TYPE='client'
TIME='MEDIUM'
TEST_CATEGORY='Functional'
TEST_CLASS='Software'
DOC='''
Call the stress control file, only with custom params
to heavily stress a machine's memory.
'''

import os
from autotest.client import utils

try:
    from virttest.staging import utils_memory
except ImportError:
    from autotest.client.shared import utils_memory

# Assemble the parameters specially to stress memory

# We will use 2 workers of each type for each CPU detected
threads = 2 * utils.count_cpus()

mem = utils_memory.memtotal() / 1024 / 512
memory_per_thread = 256 * 1024

free_disk = utils.freespace(os.getcwd())
file_size_per_thread = 1024 ** 2
if (0.9 * free_disk) < file_size_per_thread * threads:
    file_size_per_thread = (0.9 * free_disk) / threads

stress_length = 60

# Number of CPU workers spinning on sqrt()
args = '--cpu %d ' % threads
# Number of IO workers spinning on sync()
args += '--io %d ' % threads
# Number of Memory workers spinning on malloc()/free()
args += '--vm %d ' % mem
# Amount of memory used per each worker
args += '--vm-bytes %d ' % memory_per_thread
# Number of HD workers spinning on write()/ulink()
args += '--hdd %d ' % threads
# Size of the files created by each worker in bytes
args += '--hdd-bytes %d ' % file_size_per_thread
# Time for which the stress test will run
args += '--timeout %d ' % stress_length
# Verbose flag
args += '--verbose'

job.run_test('stress', args=args)
