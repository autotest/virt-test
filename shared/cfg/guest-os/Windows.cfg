- @Windows:
    vfd_size = 2880k
    os_type = windows
    image_size = 30G
    use_libvirt_cdrom_switch = yes
    shutdown_command = shutdown /s /f /t 0
    reboot_command = shutdown /r /f /t 0
    status_test_command = echo %errorlevel%
    shell_prompt = "^\w:\\.*>\s*$"
    username = Administrator
    # Attention: Changing the password in this file is not supported,
    # since files in winutils.iso use it.
    password = 1q2w3eP
    shell_linesep = "\r\n"
    shell_client = nc
    shell_port = 10022
    file_transfer_client = rss
    file_transfer_port = 10023
    redirs += " file_transfer"
    guest_port_remote_shell = 10022
    guest_port_file_transfer = 10023

    # This ISO will be used for all tests except install:
    cdrom_cd1 = isos/windows/winutils.iso

    cpu_chk_cmd = echo %NUMBER_OF_PROCESSORS%
    mem_chk_cmd = wmic memphysical
    mem_chk_cur_cmd = wmic memphysical

    rtc_base = localtime

    # these config are used in virt_test_utils.get_readable_cdroms()
    cdrom_get_cdrom_cmd = "echo list volume > check_cdrom &&"
    cdrom_get_cdrom_cmd += " echo exit >> check_cdrom &&"
    cdrom_get_cdrom_cmd += " diskpart /s check_cdrom"
    cdrom_check_cdrom_pattern = "\d\s+(\w).*CD-ROM"
    cdrom_test_cmd = "dir %s:\"
    unattended_install.cdrom, whql.support_vm_install:
        timeout = 7200
        finish_program = deps/finish.bat
        # process need to check after post install
        # process_check = $process_name
        cdroms += " winutils"
        cdrom_winutils = isos/windows/winutils.iso
        drive_index_winutils = 2
        kernel =
        initrd =
    migrate:
        migration_test_command = ver && vol
        migration_bg_command = start ping -t localhost
        migration_bg_check_command = tasklist | find /I "ping.exe"
        migration_bg_kill_command = taskkill /IM ping.exe /F
    migrate.with_file_transfer:
        guest_path = C:\tmpfile
    stress_boot:
        alive_test_cmd = systeminfo
    timedrift, timerdevice..boot_test:
        # Timedrift compensation on Windows with hpet does not happen
        disable_hpet = yes
        extra_params += " -rtc-td-hack"
        time_command = "echo TIME: %date% %time%"
        time_filter_re = "(?<=TIME: \w\w\w ).{19}(?=\.\d\d)"
        time_format = "%m/%d/%Y %H:%M:%S"
        # For this to work, the cdrom at d: should contain vlc (d:\vlc\vlc.exe) and a video (d:\ED_1024.avi)
        guest_load_command = 'cmd /c "d:\vlc\vlc -f --loop --no-qt-privacy-ask --no-qt-system-tray d:\ED_1024.avi"'
        # Alternative guest load:
        #guest_load_command = "(dir /s && dir /s && dir /s && dir /s) > nul"
        guest_load_stop_command = "taskkill /F /IM vlc.exe"
        guest_load_instances = 2
        host_load_command = "bzip2 -c --best /dev/urandom > /dev/null"
        # Alternative host load:
        #host_load_command = "dd if=/dev/urandom of=/dev/null"
        host_load_instances = 8
        ntp:
            time_command = "w32tm /stripchart /samples:1 /computer:pool.ntp.org"
            time_filter_re = "\d+/\d+/\d+\s\d+:\d+:\d+ [AP]M"
            time_format = "%m/%d/%Y %H:%M:%S"
        date:
            time_command = "echo TIME: %date% %time%"
            time_filter_re = "(?<=TIME: \w\w\w ).{19}(?=\.\d\d)"
            time_format = "%m/%d/%Y %H:%M:%S"
    time_manage:
        alive_test_cmd = systeminfo
        time_command = "echo TIME: %date% %time%"
        time_filter_re = "(?<=TIME: \w\w\w ).{19}(?=\.\d\d)"
        time_format = "%m/%d/%Y %H:%M:%S"
    hibernate:
        check_s4_support_cmd = powercfg /hibernate on
        test_s4_cmd = start ping -t localhost
        check_s4_cmd = tasklist | find /I "ping.exe"
        set_s4_cmd = rundll32.exe PowrProf.dll, SetSuspendState
        kill_test_s4_cmd = taskkill /IM ping.exe /F
        services_up_timeout = 30
    guest_s3, check_suspend:
        s3_support_chk_cmd = 'wevtutil cl system && powercfg /h off & powercfg -a | findstr /I /C:"The following sleep states are available on this system: Standby ( S3 )"'
        s3_start_cmd = "rundll32.exe PowrProf.dll,SetSuspendState 0,1,0"
        s3_bg_program_setup_cmd = 'start /B ping -t localhost'
        s3_bg_program_chk_cmd = 'tasklist | findstr /I /C:"ping.exe"'
        s3_bg_program_kill_cmd = 'taskkill /IM ping.exe /F'
        s3_log_chk_cmd = 'wevtutil qe system /f:text | findstr /I /C:"The system has resumed from sleep" /C:"The system is entering sleep"'
    guest_s4, check_suspend:
        s4_support_chk_cmd = powercfg /hibernate on
        s4_bg_program_setup_cmd = 'start ping -t localhost'
        s4_bg_program_chk_cmd = 'tasklist | find /I "ping.exe"'
        s4_bg_program_kill_cmd = 'taskkill /IM ping.exe /F'
        s4_start_cmd = 'rundll32.exe PowrProf.dll, SetSuspendState'
        s4_log_chk_cmd = 'wevtutil qe system /f:text | findstr /I /C:"The system has resumed from sleep" /C:"The system is entering sleep"'
    nic_hotplug:
        reference_cmd = ipconfig /all
        find_pci_cmd = ipconfig /all | find "Description"
        wait_secs_for_hook_up = 10
        nic_e1000:
            match_string = "Intel(R) PRO/1000 MT Network Connection"
        nic_virtio:
            match_string = "VirtIO Ethernet"
    jumbo:
        reg_mtu_cmd = reg add HKLM\SYSTEM\CurrentControlSet\Control\Class\{4D36E972-E325-11CE-BFC1-08002BE10318}\%04d /v %s /d %d /f
        mtu_key = mtu
    mac_change:
        change_cmd = reg add HKLM\SYSTEM\CurrentControlSet\Control\Class\{4D36E972-E325-11CE-BFC1-08002BE10318}\%04d /v NetworkAddress /d %s  /f
        clean_cmd = reg delete  HKLM\SYSTEM\CurrentControlSet\Control\Class\{4D36E972-E325-11CE-BFC1-08002BE10318}\%04d /v NetworkAddress /f
    nic_promisc:
        tmp_dir = C:\
    multicast_iperf:
        tmp_dir = C:\
    virtual_nic_send_buffer:
        tmp_dir = C:\
        clean_cmd = del
    block_hotplug:
        wait_secs_for_hook_up = 10
        reference_cmd = wmic diskdrive list brief
        find_pci_cmd = wmic diskdrive list brief
        pci_test_cmd = "echo rescan > dt &&"
        pci_test_cmd += "echo list disk >> dt &&"
        pci_test_cmd += "echo select disk %s >> dt &&"
        pci_test_cmd += " echo detail disk >> dt &&"
        pci_test_cmd += " echo exit >> dt &&"
        pci_test_cmd += " diskpart /s dt"
        block_virtio, blk_virtio_blk:
            match_string = "VirtIO SCSI Disk Device"
    format_disk, usb_storage:
        create_partition_cmd = "echo select disk 1 > cmd &&"
        create_partition_cmd += " echo create partition primary >> cmd &&"
        create_partition_cmd += " echo select partition 1 >> cmd &&"
        create_partition_cmd += " echo assign letter=I >> cmd &&"
        create_partition_cmd += " echo exit >> cmd &&"
        create_partition_cmd += " diskpart /s cmd"
        format_cmd = "format I: /FS:NTFS /V:local /Q /y"
        list_disk_cmd = "echo list disk >  cmd &&"
        list_disk_cmd += " echo exit >>  cmd &&"
        list_disk_cmd += " diskpart /s cmd"
        set_online_cmd = " echo select disk %s > cmd &&"
        set_online_cmd += " echo online disk >> cmd &&"
        set_online_cmd += " echo att disk clear readonly >> cmd &&"
        set_online_cmd += " echo exit >> cmd &&"
        set_online_cmd += " diskpart /s cmd"
        testfile_name = "I:\\format_disk-test.txt"
        writefile_cmd = "echo %s > %s"
        readfile_cmd = "type %s"
        mount_cmd = ""
        umount_cmd = ""
    physical_resources_check:
        catch_uuid_cmd =
        catch_serial_cmd = "wmic diskdrive get serialnumber | more +1"
        cpu_vendor_id_chk_cmd = "wmic cpu get Manufacturer | more +1"
        #XXX: Since I don't find a reliable way to check the cpu socket
        # numbers for windows, disable this kind of checking temporarily.
        cpu_sockets_chk_cmd = ""
        cpu_cores_chk_cmd = "wmic cpu get NumberOfCores | more +1"
        cpu_threads_chk_cmd = "wmic cpu get NumberOfLogicalProcessors | more +1"
        #check_machine_type_cmd = "wmic csproduct get Version"
        virtio_blk, virtio_net:
            vio_driver_chk_cmd = 'driverquery /si | find "Red Hat"'
    file_transfer:
        tmp_dir = C:\
        clean_cmd = del
    sysprep:
        shell_client = telnet
        shell_port = 23
        guest_port_remote_shell = 23
    vmstop:
        guest_path = C:\
    multi_disk:
        black_list += " E:"
        shell_port = 23
        shell_client = telnet
        post_cmd = del c:\cmd.exe; true
        file_system = "ntfs fat32"
        cmd_list = "copy_to_command copy_from_command"
        list_volume_command = wmic volume get driveletter
        re_str = "([A-Z]:)"
        format_command = format /fs:%s %s /q /y
        copy_to_command = copy C:\WINDOWS\system32\cmd.exe %s /y
        copy_from_command = copy %s\cmd.exe c:\ /y
        compare_command = fc /b c:\windows\system32\cmd.exe c:\cmd.exe
        check_result_key_word = no difference
        one_disk_repeat:
            pre_cmd = " echo select disk 1 > diskpart.script &&"
            pre_cmd += " echo create partition primary >> diskpart.script &&"
            pre_cmd += " echo assign >> diskpart.script &&"
            pre_cmd += " echo select disk 0 >> diskpart.script &&"
            pre_cmd += " echo exit >> diskpart.script &&"
            pre_cmd += " diskpart /s diskpart.script"
        max_disk:
            ide:
                # Disable cdrom for this test so that we can use all the 4 ide ports.
                cdroms = ""
                pre_cmd = "del diskpart.script &&"
                pre_cmd += " (for %i in (1 2 3) do"
                pre_cmd += " echo select disk %i >> diskpart.script &&"
                pre_cmd += " echo create partition primary >> diskpart.script &&"
                pre_cmd += " echo assign >> diskpart.script) &&"
                pre_cmd += " echo select disk 0 >> diskpart.script &&"
                pre_cmd += " echo exit >> diskpart.script &&"
                pre_cmd += " diskpart /s diskpart.script"
            virtio_blk:
                pre_cmd = "del diskpart.script &&"
                pre_cmd += " (for /L %i in (1 1 24) do"
                pre_cmd += " echo select disk %i >> diskpart.script &&"
                pre_cmd += " echo create partition primary >> diskpart.script &&"
                pre_cmd += " echo assign >> diskpart.script) &&"
                pre_cmd += " echo exit >> diskpart.script &&"
                pre_cmd += " diskpart /s diskpart.script"
    usb_multi_disk:
        black_list += " E:"
        shell_port = 23
        shell_client = telnet
        post_cmd = del c:\cmd.exe; true
        file_system = "ntfs fat32"
        cmd_list = "copy_to_command copy_from_command"
        list_volume_command = wmic volume get driveletter
        re_str = "([A-Z]:)"
        format_command = format /fs:%s %s /q /y
        copy_to_command = copy C:\WINDOWS\system32\cmd.exe %s /y
        copy_from_command = copy %s\cmd.exe c:\ /y
        compare_command = fc /b c:\windows\system32\cmd.exe c:\cmd.exe
        check_result_key_word = no difference
        one_disk_repeat:
            pre_cmd = " echo select disk 1 > diskpart.script &&"
            pre_cmd += " echo create partition primary >> diskpart.script &&"
            pre_cmd += " echo assign >> diskpart.script &&"
            pre_cmd += " echo select disk 0 >> diskpart.script &&"
            pre_cmd += " echo exit >> diskpart.script &&"
            pre_cmd += " diskpart /s diskpart.script"
        max_disk:
            pre_cmd = "del diskpart.script &&"
            pre_cmd += " (for /L %i in (1 1 24) do"
            pre_cmd += " echo select disk %i >> diskpart.script &&"
            pre_cmd += " echo create partition primary >> diskpart.script &&"
            pre_cmd += " echo assign >> diskpart.script) &&"
            pre_cmd += " echo exit >> diskpart.script &&"
            pre_cmd += " diskpart /s diskpart.script"
    floppy_test:
        format_floppy_cmd = echo n|format A: /Q /V:test_floppy
        source_file = C:\Windows\System32\cmd.exe
        dest_file = A:\cmd.exe
        clean_cmd = del
        diff_file_cmd = fc
        test_floppy_cmd = "chkdsk A:"
        copy_cmd = copy
    unattended_install:
        dump_path = C:\Windows\Memory.dmp
        analyze_cmd = E:\autoit3.exe E:\dump_control.au3
        sub_type = nmi_bsod_catch
        rename_error_image = yes
    balloon_check:
        free_mem_cmd = wmic os get FreePhysicalMemory
    live_snapshot_chain:
        md5_cmd = "cd C:\test && D:\coreutils\md5sum.exe %s"
        file_create_cmd = "D:\coreutils\DummyCMD.exe C:\test\%s 1048576 1"
        file_dir = "C:\test"
        dir_create_cmd = "mkdir %s& dir"
        file_check_cmd = "dir %s"
        check_alive_cmd = "dir"
    live_snapshot_chain.update:
        post_snapshot_cmd = {shell:D:\whql\WUInstall.exe /install}
    live_snapshot_chain.oops:
        post_snapshot_cmd = {monitor:nmi 0}
    block_stream, drive_mirror:
        tmp_dir = "C:\"
    drive_mirror.with_stress.dd:
        #if this link not available, please download from http://www.chrysocome.net/downloads/dd-0.5.zip
        download_link = "http://www.chrysocome.net/downloads/dd.exe"
        pkg_md5sum = 168b73cc0f3d8c92c98c5028aec770df
        install_cmd = 'mkdir "C:\Program Files\dd" && copy /b %s\dd.exe "C:\Program Files\dd\"'
        config_cmd = 'setx path "%path%;C:\Program Files\dd" -m'
        app_check_cmd = "dd --list"
        start_cmd = "dd if=/dev/random of=c:\test.img bs=4k count=25000"
        stop_cmd = 'taskkill /F /T /IM dd.exe & del /f /s /q "c:\test.img"'
        check_cmd = 'tasklist | findstr /I  "dd.exe"'
    drive_mirror.with_stress.heavyload, drive_mirror.with_powerdown, block_stream.with_stress:
        download_link = "http://www.jam-software.com/heavyload/HeavyLoadSetup.exe"
        pkg_md5sum = 5bf187bd914ac8ce7f79361d7b56bc15
        install_cmd = 'start /wait %s\HeavyLoadSetup.exe /verysilent'
        config_cmd = 'setx path "%path%;C:\Program Files\JAM Software\HeavyLoad" -m'
        app_check_cmd = "heavyload"
        start_cmd = "heavyload /CPU /MEMORY /START"
        check_cmd = 'tasklist | findstr /I  "heavyload.exe"'
        stop_cmd = "taskkill /T /F /IM heavyload.exe"
    qemu_disk_img:
        # md5sum binary path, eg, c:\program\md5sum.exe
        md5sum_bin = "md5sum"
        guest_file_name  = "c:\test.img"
        guest_file_name_image1  = "c:\test.img"
        guest_file_name_snA = "c:\sna.img"
        guest_file_name_snB = "c:\snb.img"
        guest_file_name_snC = "c:\snc.img"
        guest_file_name_snD = "c:\snd.img"
    readonly_floppy:
        sleep = True
        format_floppy0_cmd = echo n|format A: /Q /V:test_floppy
        format_floppy1_cmd = echo n|format B: /Q /V:test_floppy
    stop_continue.with_file_copy:
        # fsutil and md5sum are tools for generate big file and md5 value in Windows guest
        prepare_op = fsutil file createnew C:\1.txt 314572800
        prepare_op_timeout = 240
        start_bg_process = yes
        bg_cmd = copy C:\1.txt C:\2.txt /y
        check_op = echo cd C:\ > C:\tmp.bat&& echo for /F "tokens=1,*" %%i in ('D:\coreutils\md5sum.exe C:\1.txt') do D:\coreutils\md5sum.exe C:\2.txt ^| find "%%i" >> C:\tmp.bat && C:\tmp.bat
        clean_op = dir C:\ && del C:\1.txt C:\2.txt C:\tmp.bat && dir C:\
    usb..usb_boot, usb..usb_reboot:
        deviceid_str = "VID_%s&PID_%s"
        chk_usb_info_cmd = 'wmic path Win32_USBControllerDevice get Dependent | find "USB"'
        vendor = ""
        product = ""
