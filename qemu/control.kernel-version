AUTHOR = """
ypu@redhat.com (Yiqiao Pu)
"""
TIME = 'MEDIUM'
NAME = 'QEMU (KVM) Test - Host autoconfig'
TEST_TYPE = 'client'
TEST_CLASS = 'Virtualization'
TEST_CATEGORY = 'Functional'

DOC = """
Executes the QEMU (accelerated via KVM) test framework on a given host,
adapting the tests executed to the host machine.

Online docs: https://github.com/autotest/virt-test/wiki
"""

import sys, os, logging, re, commands
from distutils import version
virt_test_dir = os.path.join(os.environ['AUTODIR'],'tests/virt')
sys.path.insert(0, virt_test_dir)
from virttest import utils_misc, cartesian_config

os.environ['LANG'] = 'en_US.UTF-8'


def package_check(dict_test, verbose=False):
    """
    Check if the package request in case installed in host.

    @dict_test: dict for test case
    @verbose: print out the debug messages or not
    @return: Boolean value for have the packages or not
    """
    failed_message = ""
    for package in dict_test.get("required_packages", "").split():
        package_check_cmd = (dict_test.get("package_check_cmd_%s" % package)
                             or dict_test.get("package_check_cmd"))
        package_check_cmd = re.sub("PACKNAME", package, package_check_cmd)
        s, o = commands.getstatusoutput(package_check_cmd)
        if s != 0:
            failed_message += "%s not installed.\n" % package
            continue

        if dict_test.get("requires_%s" % package):
            tmp_str = (dict_test.get("package_version_pattern_%s" % package)
                       or dict_test.get("package_version_pattern"))
            version_pattern = re.sub("PACKNAME", package, tmp_str)
            packge_version = re.findall(version_pattern, o)
            if packge_version:
                packge_version = packge_version[0].strip()
            else:
                failed_message += "Can not get version info."
                failed_message += " Please check your pattern and command."
                continue

            package_requires = eval(dict_test.get("requires_%s" % package))
            if isinstance(package_requires, list):
                package_requires = (package_requires,)
            for requires in package_requires:
                pass_flag = False
                for require in requires:
                    op = re.findall("[>=<!]+", require)[0]
                    ver = re.sub(op, "", require)
                    compare_str = ("version.LooseVersion('%s') " %
                                   packge_version)
                    compare_str += "%s " % op
                    compare_str += ("version.LooseVersion('%s')" %
                                    ver.strip())
                    if verbose:
                        print compare_str
                    if not eval(compare_str):
                        break
                else:
                    pass_flag = True

            if not pass_flag:
                failed_message += "%s in system is" % package
                failed_message += " not fit the requires for test.\n"
                failed_message += "require is: %s\n" % str(package_requires)
                failed_message += "system is: %s\n" % packge_version

    if failed_message:
        if verbose:
            print failed_message
        return False

    return True

qemu_test_dir = os.path.join(os.environ['AUTODIR'],'tests/virt/qemu')
update_config = os.path.join(qemu_test_dir, 'update_config.py')
utils.system(update_config)
parser = cartesian_config.Parser()

parser.parse_file(os.path.join(qemu_test_dir, "cfg", "tests-example.cfg"))

host_kernel_ver_str = ""
host_kernel_ver_file = "/tmp/host_kernel_version"
if os.path.isfile(host_kernel_ver_file):
    os.remove(host_kernel_ver_file)

filter_str = ""
for dict_test in parser.get_dicts():
    verbose = dict_test.get("host_check_verbose", "no") == "yes"
    if (dict_test.get("required_packages") and
        not package_check(dict_test, verbose=verbose)):
        filter_str += "no %s\n" % dict_test['name']
        logging.warning("Skip case '%s' due to package "
                        "missing." % dict_test['name'])

    if dict_test.get("requires_kernel") and not host_kernel_ver_str:
        if dict_test.get("pre_check_cmd"):
            s, o = commands.getstatusoutput(dict_test.get("pre_check_cmd"))
            if s != 0:
                continue
        if os.path.isfile(host_kernel_ver_file):
            kervel_version = open(host_kernel_ver_file, "r")
            host_kernel_ver_str = kervel_version.read()
            kervel_version.close()
        else:
            host_dict = dict_test.copy()
            host_dict["required_packages"] = "kernel"
            if package_check(host_dict, verbose=verbose):
                host_kernel_ver_str = ("only %s\n" %
                                       host_dict.get("host_kernel_ver_str"))
                kervel_version = open(host_kernel_ver_file, "w")
                kervel_version.write(host_kernel_ver_str)
                kervel_version.close()

filter_str += host_kernel_ver_str

parser.parse_string(filter_str)

utils_misc.run_tests(parser, job)
