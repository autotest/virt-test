- eject_change_media:
    no RHEL.3.9
    type = eject_change_media
    virt_test_type = qemu
    monitor_type = qmp
    pre_command += "dd if=/dev/urandom of=/tmp/orig bs=10M count=1 && dd if=/dev/urandom of=/tmp/new bs=10M count=1 && mkisofs -o /tmp/orig.iso /tmp/orig && mkisofs -o /tmp/new.iso /tmp/new;"
    post_command += "rm -rf /tmp/orig.iso /tmp/new.iso /tmp/orig /tmp/new;"
    new_img_name = "/tmp/new.iso"
    variants:
        - eject_change_repeat:
            repeat_times = 10
        - eject_locked_cdrom:
            only Linux
            mount_cdrom_cmd = "mount %s /media -oloop,ro"
            umount_cdrom_cmd = "umount %s"
            force_eject = yes
        - eject_nonremove_device:
            eject_nonremove_device = yes
            force_eject = yes
    Linux:
        # it before cdrom test to avoid test failed some latest guest;
        pre_cmd = "cd /lib/udev/rules.d && [ -f ./60-cdrom_id.rules ] && "
        pre_cmd += "sed -i 's/\(.*DISK_EJECT_REQUEST.*\)/#\1/g' ./60-cdrom_id.rules && "
        pre_cmd += "sed -i  's/\(.*lock-media.*\)/#\1/g' ./60-cdrom_id.rules"
        post_cmd = "cd /lib/udev/rules.d && [ -f 60-cdrom_id.rules ] && "
        post_cmd += "sed -i 's/#\(.*DISK_EJECT_REQUEST.*\)/\1/g' ./60-cdrom_id.rules &&"
        post_cmd += "sed -i 's/#\(.*lock-media.*\)/\1/g' ./60-cdrom_id.rules"
        cdrom_cd1 = "/tmp/orig.iso"
        target_cdrom = cdrom_cd1
    Windows:
        cdroms += " cd2"
        cdrom_cd2 = "/tmp/orig.iso"
        target_cdrom = cdrom_cd2
