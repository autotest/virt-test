- systemtap_tracing:
    #if you want exec command durnning tracing,you can add cmds_exec
    #this support monitor command and bash command.
    #the command is madeup of  commands_type:commands[;commands]
    #commands_type shoule be 'monitro' or 'bash'(if none is bash)
    #the same type commands split using ";"
    #the diff type command split using  ","
    #for example:
    # cmds_exec = bash:ls /root, monitor:info status;stop, bash:ls;ls
    # or
    # cmds_exec = ls /root, monitor:info status; stop, ls;ls
    type = systemtap_tracing
    profilers = systemtap
    kill_vm = yes
    variants:
        - balloon_event:
            extra_params = -device virtio-balloon-pci,id=ballooning
            probe_var_key = opaque addr
            stap_script_file = balloon_event.stp
            cmds_exec = monitor:balloon value=2048
        - memalign:
            probe_var_key = alignment size ptr
            stap_script_file = memalign.stp
        - paio_submit:
            probe_var_key = acb opaque sector_num nb_sectors type
            stap_script_file = paio_submit.stp
        - vm_state_notify:
            probe_var_key = running reason
            stap_script_file = vm_state_notify.stp
            cmds_exec = monitor:stop;cont
        - @bdrv:
            variants:
                - bdrv_aio_readv:
                    probe_var_key = bs sector_num nb_sectors opaque
                    stap_script_file = bdrv_aio_readv.stp
                - bdrv_aio_writev:
                    probe_var_key = bs sector_num nb_sectors opaque
                    stap_script_file = bdrv_aio_writev.stp
                - bdrv_lock_medium:
                    start_vm = no
                    probe_var_key = bs locked
                    stap_script_file = bdrv_lock_medium.stp
                    boot_with_cdrom = yes
        - @cpu:
            variants:
                - cpu_get_apic_base:
                    probe_var_key = val
                    stap_script_file = cpu_get_apic_base.stp
                - cpu_in:
                    probe_var_key = addr   val
                    stap_script_file = cpu_in.stp
                - cpu_out:
                    probe_var_key = addr val
                    stap_script_file = cpu_out.stp
        - @qemu:
            variants:
                - qemu_free:
                    probe_var_key = ptr
                    stap_script_file = qemu_free.stp
                - qemu_malloc:
                    probe_var_key = size ptr
                    stap_script_file = qemu_malloc.stp
                - qemu_realloc:
                    probe_var_key = ptr size newptr
                    stap_script_file = qemu_realloc.stp
                - qemu_vfree:
                    probe_var_key = ptr
                    stap_script_file = qemu_vfree.stp
                - qemu_vmalloc:
                    probe_var_key = size
                    stap_script_file = qemu_vmalloc.stp
        - @virtio_scsi:
            start_vm = no
            boot_with_cdrom = yes
            cd_format = scsi-cd
            variants:
                - scsi_req_alloc:
                    probe_var_key = target lun tag
                    stap_script_file = scsi_req_alloc.stp
                - scsi_req_continue:
                    probe_var_key = target lun tag
                    stap_script_file = scsi_req_continue.stp
                - scsi_req_data:
                    probe_var_key = target lun tag len
                    stap_script_file = scsi_req_data.stp
                - scsi_req_dequeue:
                    probe_var_key = target lun tag
                    stap_script_file = scsi_req_dequeue.stp
                - scsi_req_parsed_lba:
                    probe_var_key = target lun tag cmd lba
                    stap_script_file = scsi_req_parsed_lba.stp
                - scsi_req_parsed:
                    probe_var_key = target lun tag cmd mode xfer
                    stap_script_file = scsi_req_parsed.stp
        -@usb_d:
            usb_devices = tablet1 hub
            usbs = usb1 usb2
            usb_type_usb1 = ich9-usb-uhci1
            usb_type_usb2 = usb-ehci
            usb_controller_tablet1 = uhci
            usb_controller_hub = uhci
            usb_type_tablet1 =  usb-tablet
            usb_type_hub = usb-hub
            usb_max_port_usb2 = 6
            images += " stg"
            image_name_stg = "images/usbdevice"
            image_format_stg = "qcow2"
            create_image_stg = yes
            index_enable = yes
            drive_index_stg = 1
            removable_stg = on
            image_size_stg = 10M
            drive_format_stg = "usb2"
            variants:
                - usb_clear_device_feature:
                    probe_var_key = addr feature ret
                    stap_script_file = usb_clear_device_feature.stp
                - @desc:
                    variants:
                        - usb_desc_config:
                            probe_var_key = addr index len ret
                            stap_script_file = usb_desc_config.stp
                        - usb_desc_device_qualifier:
                            probe_var_key = addr len ret
                            stap_script_file = usb_desc_device_qualifier.stp
                        - usb_desc_device:
                            probe_var_key = addr len ret
                            stap_script_file = usb_desc_device.stp
                        - usb_desc_string:
                            probe_var_key = addr index len ret
                            stap_script_file = usb_desc_string.stp
                - @ehci:
                    variants:
                        - usb_ehci_data:
                            probe_var_key = rw cpage offset addr len bufpos
                            stap_script_file = usb_echi_data.stp
                        - usb_ehci_mmio_change:
                            probe_var_key = addr str new old
                            stap_script_file = usb_ehci_mmio_change.stp
                        - usb_ehci_mmio_readl:
                            probe_var_key = addr str val
                            stap_script_file = usb_ehci_mmio_readl.stp
                        - usb_ehci_mmio_writel:
                            probe_var_key = addr str val
                            stap_script_file = usb_ehci_mmio_writel.stp
                        - usb_ehci_port_detach:
                            probe_var_key = port
                            stap_script_file = usb_ehci_port_detach.stp
                        - usb_ehci_port_reset:
                            probe_var_key = port enable
                            stap_script_file = usb_ehci_port_reset.stp
                        - usb_ehci_qh_bits:
                            probe_var_key = addr c h dtc i
                            stap_script_file = usb_ehci_qh_bits.stp
                        - usb_ehci_qh_ptrs:
                             probe_var_key = q addr nxt c_qtd n_qtd a_qtd
                            stap_script_file = usb_ehci_qh_ptrs.stp
                        - usb_ehci_qtd_bits:
                            probe_var_key = addr ioc active halt babble xacterr
                            stap_script_file = usb_ehci_qtd_bits.stp
                        - usb_ehci_qtd_fields:
                            probe_var_key = addr tbytes cpage cerr pid
                            stap_script_file = usb_ehci_qtd_fields.stp
                        - usb_ehci_qtd_ptrs:
                            probe_var_key = q addr nxt altnext
                            stap_script_file = usb_ehci_qtd_ptrs.stp
                        - usb_ehci_queue_action:
                            probe_var_key = q action
                            stap_script_file = usb_ehci_queue_action.stp
                        - usb_ehci_reset:
                            probe_var_key = reset
                            stap_script_file = usb_ehci_reset.stp
                        - usb_ehci_state:
                            probe_var_key = schedule state
                            stap_script_file = usb_ehci_state.stp
                        - usb_ehci_usbsts:
                            probe_var_key = sts state
                            stap_script_file = usb_ehci_usbsts.stp
                - @port:
                    variants:
                        - usb_port_attach:
                            probe_var_key = bus port
                            stap_script_file = usb_port_attach.stp
                        - usb_port_claim:
                            probe_var_key = bus port
                            stap_script_file = usb_port_claim.stp
                        - usb_port_release:
                            index_enable = yes
                            probe_var_key = bus port
                            stap_script_file = usb_port_release.stp
                            cmds_exec = "monitor:device_del id=stg"
                        - usb_port_detach:
                            index_enable = yes
                            probe_var_key = bus port
                            stap_script_file = usb_port_detach.stp
                            cmds_exec = "monitor:device_del id=stg"

                - @set:
                    variants:
                        - usb_set_addr:
                            probe_var_key = addr
                            stap_script_file = usb_set_addr.stp
                        - usb_set_config:
                            probe_var_key = addr config ret
                            stap_script_file = usb_set_config.stp
                        - usb_set_device_feature:
                            probe_var_key =  addr feature ret
                            stap_script_file = usb_set_device_feature.stp
        - @virtio_block:
            variants:
                - virtio_blk_req_complete:
                    probe_var_key = req status
                    stap_script_file = virtio_blk_req_complete.stp
                - virtio_blk_rw_complete:
                    probe_var_key = req ret
                    stap_script_file = virtio_blk_rw_complete.stp
                    cmds_exec = dd if=/dev/zero of=/tmp/testvirt bs=1k count=1000
        - @virtio_queue:
            variants:
                - virtio_notify:
                    probe_var_key = vdev vq
                    stap_script_file = virtio_notify.stp
                - virtio_queue_notify:
                    probe_var_key = vdev n vq
                    stap_script_file = virtio_queue_notify.stp
                    cmds_exec = dd if=/dev/zero of=/tmp/testvirt bs=1k count=1000
                - virtqueue_fill:
                    probe_var_key = vq elem len idx
                    stap_script_file = virtqueue_fill.stp
                    cmds_exec = dd if=/dev/zero of=/tmp/testvirt bs=1k count=1000
                - virtqueue_flush:
                    probe_var_key = vq count
                    stap_script_file = virtqueue_flush.stp
                - virtqueue_pop:
                    probe_var_key = vq elem in_num out_num
                    stap_script_file = virtqueue_pop.stp
