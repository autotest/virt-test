- qemu_img:
    type = qemu_img
    vms = ''
    profilers = ''
    take_regular_screendumps = no
    variants:
        - check:
            subcommand = check
            image_name_dd = dd_created_image
            force_create_image_dd = no
            remove_image_dd = yes
            create_image_cmd = "dd if=/dev/zero of=%s bs=1G count=1"
            # Test the convertion from 'dd_image_name' to specified format
            supported_image_formats = qcow2 raw qed
        - create:
            subcommand = create
            images += " large"
            force_create_image_large = yes
            image_size_large = 1G
            image_name_large = create_large_image
            remove_image_large = yes
            variants:
                 - non-preallocated:
                     variants:
                         - cluster_512:
                             cluster_size = 512
                         - cluster_1024:
                             cluster_size = 1024
                         - cluster_4096:
                             cluster_size = 4096
                         - cluster_1M:
                             cluster_size = 1M
                         - cluster_2M:
                             cluster_size = 2M
                 - preallocated:
                     no raw
                     preallocated = metadata
                     variants:
                         - file:
                         - over_lvm:
                             pre_command += " qemu-img create -f raw 0.raw 10G && qemu-img create -f raw 1.raw 10G && losetup /dev/loop0 0.raw && losetup /dev/loop1 1.raw && pvcreate /dev/loop0 /dev/loop1 && vgcreate vg /dev/loop0 /dev/loop1 && lvcreate -L 19G -n lv vg"
                             device = /dev/vg/lv
                             image_size_large = 18G
                             post_command += " lvremove -f vg ; losetup -d /dev/loop0 ; losetup -d /dev/loop1; rm -rf /dev/vg; rm -rf *.raw;"
                             pre_command_noncritical = no
                             post_command_noncritical = no
        - convert:
            subcommand = convert
            variants:
                - to_qcow2:
                    dest_image_format = qcow2
                    compressed = no
                    encrypted = no
                - to_raw:
                    dest_image_format = raw
                - to_qed:
                    dest_image_format = qed

        - snapshot:
            subcommand = snapshot
        - info:
            subcommand = info
        - rebase:
            subcommand = rebase
            rebase_mode = unsafe
            image_name_snapshot1 = sn1
            image_name_snapshot2 = sn2
        # Commit is the only subtest that does need an installed guest
        - commit:  install setup image_copy unattended_install.cdrom
            subcommand = commit
