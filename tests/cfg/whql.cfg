- whql: install setup image_copy unattended_install.cdrom
    virt_test_type = qemu libvirt
    only Windows
    # Replace this with the address of an installed DTM server
    server_address = 10.20.30.40
    # The server should run rss.exe like a regular Windows VM, preferably
    # with administrator privileges (or at least with permission to write
    # to the DTM studio directory)
    server_shell_port = 10022
    server_file_transfer_port = 10023
    server_studio_path = %programfiles%\Microsoft Driver Test Manager\Studio
    dsso_test_binary = deps/whql_submission_15.exe
    dsso_delete_machine_binary = deps/whql_delete_machine_15.exe
    wtt_services = wttsvc
    variants:
        - support_vm_install:
            # The support VM is identical to the tested VM in every way
            # except for the image name which ends with '-supportvm'.
            type = unattended_install
            image_name += -supportvm
            boot_once = d
            force_create_image = yes
            kill_vm = yes
            redirs += " unattended_install"
            guest_port_unattended_install = 12323
            medium = cdrom
            kernel =
            initrd =
        - client_install:    support_vm_install
            type = whql_client_install
            # The username and password are required for accessing the DTM client
            # installer binary shared by the server
            server_username = administrator
            server_password = 1q2w3eP
            # This path refers to a shared directory on the server
            # (the final cmd will be something like \\servername\DTMInstall\...)
            install_cmd = \DTMInstall\Client\Setup.exe /passive
            install_timeout = 3600
            # The test will setup auto logon on the client machine using the
            # following username and password:
            client_username = DTMLLUAdminUser
            client_password = Testpassword,1
            # (These are created by the DTM client installer and should probably not
            # be changed.)
            variants:
                - @original:
                - support_vm:
                    image_name += -supportvm
        - submission:    client_install support_vm_install
            type = whql_submission
            extra_params += " -snapshot"
            restart_vm = yes
            cdroms =
            test_timeout = 3600
            device_data = cat0 cat1 cat2 cat3 prog desc virt filter logoarch logoos whqlos whqlqual
            descriptors = desc1 desc2 desc3
            # DeviceData names
            dd_name_cat0     = Category
            dd_name_cat1     = Category
            dd_name_cat2     = Category
            dd_name_cat3     = Category
            dd_name_logoarch = LogoProcessorArchitecture
            dd_name_logoos   = LogoOperatingSystem
            dd_name_whqlos   = WhqlOs
            dd_name_whqlqual = WhqlQualification
            dd_name_prog     = LogoProgramId
            dd_name_desc     = LogoProgramDescription
            dd_name_filter   = WDKFilterAttribute
            dd_name_virt     = ParaVirtualizationDriver
            # Common DeviceData data
            dd_data_filter   = FilterIfNoInf
            dd_data_virt     = True
            # Exclude jobs that have '(Manual)' in their names
            job_filter = ^((?!\(Manual\)).)*$
            variants:
                - unclassified:
                    dd_data_cat0 = Device Fundamentals
                    dd_data_cat1 = System Fundamentals\Dynamic Partitioning
                    dd_data_prog = Unclassified
                    dd_data_desc = Unclassified
                    dd_data_whqlqual = Unclassified Signature
                    variants:
                        - tablet:
                            submission_name = tablet
                            extra_params += " -usbdevice tablet"
                            test_device = HID-compliant mouse
                            test_timeout = 36000
                - device:
                    variants:
                        - keyboard:
                            submission_name = keyboard
                            # test_device is a regular expression that should match a device's
                            # name as it appears in device manager.  The first device that matches
                            # is used.
                            test_device = keyboard
                            # Set timeout to 10 hours
                            test_timeout = 36000
                            dd_data_cat0 = Input\Keyboard
                            dd_data_cat1 = Device Fundamentals
                            dd_data_cat2 = System Fundamentals\Dynamic Partitioning
                            dd_data_prog = InputKbd
                            dd_data_desc = Input > Keyboard
                        - net:
                            submission_name = net
                            # Add a support machine and extra NICs
                            vms += " supportvm"
                            nics += " nic2 nic3"
                            test_device = RTL8139.*NIC$
                            test_timeout = 86400
                            dd_data_cat0 = Network\LAN (Ethernet)
                            dd_data_cat1 = Device Fundamentals
                            dd_data_cat2 = System Fundamentals\Dynamic Partitioning
                            dd_data_prog = NetLan
                            dd_data_desc = Network > LAN (Ethernet)
                            # Machine dimensions
                            dimensions = testrole
                            dim_name_testrole = NetDevice\TestRole
                            dim_value_testrole_vm1 = NdistestLanClient
                            dim_value_testrole_supportvm = NdistestLanServer
                            # Device selection for the NDISTest client machine
                            device_params_vm1 = testdev clientmsgdev clientsupportdev
                            dp_name_testdev = NdistestLanClientTestDevice
                            dp_regex_testdev = RTL8139.*NIC$
                            dp_name_clientmsgdev = NdistestLanClientMessageDevice
                            dp_regex_clientmsgdev = RTL8139.*NIC #2$
                            dp_name_clientsupportdev = NdistestLanClientSupportDevice0
                            dp_regex_clientsupportdev = RTL8139.*NIC #3$
                            # Device selection for the NDISTest server machine
                            device_params_supportvm = servermsgdev serversupportdev
                            dp_name_servermsgdev = NdistestLanServerMessageDevice
                            dp_regex_servermsgdev = RTL8139.*NIC$
                            dp_name_serversupportdev = NdistestLanServerSupportDevice0
                            dp_regex_serversupportdev = RTL8139.*NIC #2$
                        - hdd:
                            submission_name = hdd
                            # Run the tests on a non-system drive
                            # (match device names that contain 'QEMU HARDDISK' and do not contain '[C]')
                            test_device = ^(?=.*?\bQEMU HARDDISK\b)((?!\[C\]).)*$
                            device_data += " ex0 ex1 ex2 ex3"
                            dd_data_cat0 = Storage\Device Class\Disk\Disk
                            dd_data_cat1 = Storage\Device Class\Disk\Fixed
                            dd_data_cat2 = Storage\Device Class\Disk\Bus\ATA
                            dd_data_cat3 = Device Fundamentals
                            dd_data_prog = StorHDD
                            dd_data_desc = Storage > Hard Disk Drive (HDD)
                            dd_name_ex0 = Storage_bus_type
                            dd_data_ex0 = ATA/ATAPI
                            dd_name_ex1 = Hybrid_HDD_Support
                            dd_data_ex1 = 0
                            dd_name_ex2 = Non_Rotating_Media
                            dd_data_ex2 = 0
                            dd_name_ex3 = Secure_Storage
                            dd_data_ex3 = 0
                            # Add a 2nd disk which will become D:
                            images += " tmp"
                            image_name_tmp = tmp
                            image_size_tmp = 4G
                            force_create_image_tmp = yes
                            # Run diskpart to partition the 2nd disk
                            whql_pre_command = "echo select disk=1 > dp.txt && "
                            whql_pre_command += "echo create partition primary >> dp.txt && "
                            whql_pre_command += "echo assign letter=d >> dp.txt && "
                            whql_pre_command += "diskpart /s dp.txt & "
                            whql_pre_command += "format d: /fs:ntfs /q /y"
                            variants:
                                - full:
                                    # Yes, 100 hours, this is not a mistake
                                    test_timeout = 360000
                                - syscache_test:
                                    job_filter = syscache test
                                    test_timeout = 7200
        - whql_env_setup:
            vms = ""
            type = whql_env_setup
            smp = 4
            rtc_drift = "slew"
            drive_werror = stop
            drive_rerror = stop
            cpu_family = "0xf"
            uuid = random
            force_create_image = yes
            force_create_image_image1 = no
            update_cmd = cmd /c D:\whql\wua_update.exe && cmd /c net stop wuauserv && cmd /c net start wuauserv && cmd /c D:\whql\WUInstall.exe /install /criteria "IsHidden=0 and IsInstalled=0 and IsAssigned=1" && dir
            auto_restart = "cmd /c regedit /s D:\whql\auto_restart_disable.reg"
            disable_uas =  "cmd /c regedit /s D:\whql\UAC_disable.reg"
            dbgview_cmd = "cmd /c D:\whql\dbgview_install.exe"
            setup_timeout = 9000
            disable_firewall = "netsh firewall set opmode mode=disable"
            disable_update = "net stop wuauserv"
            timezone_cmd = "tzutil /s "China Standard Time""
            # If you have some extra tools or scripts needed please put url or file list here. We will make a tmp iso here for running them inside guests
            # cdrom_whql = images/whql.iso
            # src_list =
            variants:
                - nic_device:
                    nics += ' nic2 nic3'
                    nic_model = virtio
                    nic_model_nic1 = e1000
                    nic_config_cmd = "cmd /c D:\whql\whql_nic_set.exe"
                    nic_setup_params_nic2 = Init.MaxRxBuffers:256;Init.MaxTxBuffers:256
                    nic_setup_params_nic3 = Init.MaxRxBuffers:256;Init.MaxTxBuffers:256

                - block_device:
                    image_snapshot = yes
                    images += " stg stg2 stg3 stg4"
                    image_extra_params = ""
                    image_format_stg = raw
                    image_name_stg = images/storage
                    image_size_stg = 2G
                    image_format_stg2 = raw
                    image_name_stg2 = images/storage2
                    image_size_stg2 = 2G
                    image_format_stg3 = raw
                    image_name_stg3 = images/storage3
                    image_size_stg3 = 2G
                    image_format_stg4 = raw
                    image_name_stg4 = images/storage4
                    image_size_stg4 = 2G
                    win_format_stg = NTFS
                    win_format_stg2 = NTFS
                    win_format_stg3 = FAT
                    win_format_stg4 = FAT32
                    win_extra_stg = "/c"
                    # symbol_files git repo is a git repo set up in your test env which include most of the symbol files
                    # We just need update the symbol files in guest which may save a lot of time.
                    # symbol_files =
                    debuggers_install = "cmd  /c D:\whql\dbg_install.bat"
                    symbol_file_download = "cmd /c C:\debuggers\symchk /r C:\windows\system32 /s SRV*C:\symbols\*http://msdl.microsoft.com/download/symbols & dir"
                    symbol_file_check = "cmd /c C:\debuggers\symchk C:\windows\system32\ntoskrnl.exe /s C:\symbols\"
                    symbol_check_pattern = "SYMCHK: FAILED files = 0"
                    symbol_pid_pattern = "symchk.*?PID:\s+(\d+)"

                    disk_driver_install = "cmd /c D:\whql\disk_driver_check.exe "
                    format_cmd = "format %s: /FS:%s /V:local /y"
                    disk_init_cmd = "echo select disk %s > cmd && echo create partition primary  >> cmd && echo select partition 1 >> cmd && echo assign letter=%s >> cmd && echo exit >> cmd && diskpart /s cmd"
